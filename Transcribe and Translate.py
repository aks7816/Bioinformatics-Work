# -*- coding: utf-8 -*-
"""Final Lab 04 part 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0ot1nnmoFxz1e0yD4ZOm1zp3Bj2OTQh
"""

####################################################################################### 
# (1) define dictionary to translate three-letter mRNA to three-letter amino acid here 
#######################################################################################
translate = { 
  'UUU':'Phe','UCU':'Ser','UAU':'Tyr','UGU':'Cys',
  'UUC':'Phe','UCC':'Ser','UAC':'Tyr','UGC':'Cys',
  'UUA':'Leu','UCA':'Ser','UAA':'Stop','UGA':'Stop',
  'UUG':'Leu','UCG':'Ser','UAG':'Stop','UGG':'Trp',
  'CUU':'Leu','CCU':'Pro','CAU':'His','CGU':'Arg',
  'CUC':'Leu','CCC':'Pro','CAC':'His','CGC':'Arg',
  'CUA':'Leu','CCA':'Pro','CAA':'Gln','CGA':'Arg',
  'CUG':'Leu','CCG':'Pro','CAG':'Gln','CGG':'Arg',
  'AUU':'Ile','ACU':'Thr','AAU':'Asn','AGU':'Ser',
  'AUC':'Ile','ACC':'Thr','AAC':'Asn','AGC':'Ser',
  'AUA':'Ile','ACA':'Thr','AAA':'Lys','AGA':'Arg',
  'AUG':'Met','ACG':'Thr','AAG':'Lys','AGG':'Arg',
  'GUU':'Val','GCU':'Ala','GAU':'Asp','GGU':'Gly',
  'GUC':'Val','GCC':'Ala','GAC':'Asp','GGC':'Gly',
  'GUA':'Val','GCA':'Ala','GAA':'Glu','GGA':'Gly',
  'GUG':'Val','GCG':'Ala','GAG':'Glu','GGG':'Gly'
}

#######################################################################################
# (2) define dictionary to map three-letter amino acid to one-letter amino acid here
#######################################################################################
AA_mapping = {
    'Ala':'A', 'Arg':'R','Asn':'N',
    'Asp':'D', 'Cys':'C','Gln':'Q',
    'Glu':'E', 'Gly':'G','His':'H',
    'Ile':'I', 'Leu':'L','Lys':'K',
    'Met':'M', 'Phe':'F','Pro':'P',
    'Ser':'S', 'Thr':'T','Trp':'W',
    'Tyr':'Y','Val':'V'
}

DNA = 'GGTCAGAAAAAGCCCTCTCCATGTCTACTCACGATACATCCCTGAAAACCACTGAGGAAGTGGCTTTTCAGATCATCTTGCTTTGCCAGTTTGGGGTTGGGACTTTTGCCAATGTATTTCTCTTTGTCTATAATTTCTCTCCAATCTCGACTGGTTCTAAACAGAGGCCCAGACAAGTGATTTTAAGACACATGGCTGTGGCCAATGCCTTAACTCTCTTCCTCACTATATTTCCAAACAACATGATGACTTTTGCTCCAATTATTCCTCAAACTGACCTCAAATGTAAATTAGAATTCTTCACTCGCCTCGTGGCAAGAAGCACAAACTTGTGTTCAACTTGTGTTCTGAGTATCCATCAGTTTGTCACACTTGTTCCTGTTAATTCAGGTAAAGGAATACTCAGAGCAAGTGTCACAAACATGGCAAGTTATTCTTGTTACAGTTGTTGGTTCTTCAGTGTCTTAAATAACATCTACATTCCAATTAAGGTCACTGGTCCACAGTTAACAGACAATAACAATAACTCTAAAAGCAAGTTGTTCTGTTCCACTTCTGATTTCAGTGTAGGCATTGTCTTCTTGAGGTTTGCCCATGATGCCACATTCATGAGCATCATGGTCTGGACCAGTGTCTCCATGGTACTTCTCCTCCATAGACATTGTCAGAGAATGCAGTACATATTCACTCTCAATCAGGACCCCAGGGGCCAAGCAGAGACCACAGCAACCCATACTATCCTGATGCTGGTAGTCACATTTGTTGGCTTTTATCTTCTAAGTCTTATTTGTATCATCTTTTACACCTATTTTATATATTCTCATCATTCCCTGAGGCATTGCAATGACATTTTGGTTTCGGGTTTCCCTACAATTTCTCCTTTACTGTTGACCTTCAGAGACCCTAAGGGTCCTTGTTCTGTGTTCTTCAACTGTTGAAAGCCAGAGTCACTAAAAATGCCAAACACAGAAGACAGCTTTGCTAATACCATTAAATACTTTATTCCATAAATATGTTTTTAAAAGCTTGTATGAACAAGGTATGGTGCTCACTGCTATACTTATAAAAGAGTAAGGTTATAATCACTTGTTGATATGAAAAGATTTCTGGTTGGAATCTGATTGAAACAGTGAGTTATTCACCACCCTCCATTCTCT'

def transcribe(data):
  sequence = data.replace('T','U')
  return sequence

DNAreverse = {'A':'U', 'U':'A', 'G':'C', 'C':'G' }
#Making a reverse compliment of DNA
def reverse(data):
  RNAstring = ''
  for letter in data:
    RNAstring += DNAreverse[letter]
  return RNAstring[::-1]

transcribe(DNA)

def unnest(nested_array):
  for i in nested_array:
    amino_acids = []
    for amino in i:
      amino_acids.append(AA_mapping[amino])
    print(amino_acids)
  


def transcribe(data):
  sequence = data.replace('T','U')
  return sequence

DNAreverse = {'A':'U', 'U':'A', 'G':'C', 'C':'G' }
#Making a reverse compliment of DNA
def reverse(data):
  RNAstring = ''
  for letter in data:
    RNAstring += DNAreverse[letter]
  return RNAstring[::-1]

transcribe(DNA)

def reading_frames(data):
  mRNA = transcribe(data)
  stop_codons = ['UAG', 'UAA', 'UGA']
  nested_seq = []

  # get first/second/third reading frames for forward strand
  for pos in range(0,3):
      translate_mode = False
      seq_collected = []
      for i in range(pos, len(mRNA)-3, 3):
        if mRNA[i:i+3] == 'AUG':
          translate_mode = True
        if mRNA[i:i+3] in stop_codons and translate_mode == True:
          translate_mode = False
          nested_seq.append(seq_collected)
          seq_collected = []

        if translate_mode == True:
          seq_collected.append(mRNA[i:i+3])
  # Nested array to hold each of start-stop codon translations.
  nested_translations = []
  # Loop through our nested_seq of start-stop codons.
  for i in nested_seq:
    # Empty list for each start-stip codon list.
    my_translations = []
    # For codon in each list.
    for codon in i:        
      # Append the translation of the codon using the translate dictionary to my_translations array. 
      my_translations.append(translate[codon])
    # Take the done my_translations list and append it to the nested_translations.
    nested_translations.append(my_translations)
  # Loop through the nested_translations.

  # Loop moved into unnest function. Function takes nested_translations and uses AA_mapping dictionary to translater amino acids.
  unnest(nested_translations)




reading_frames(DNA)