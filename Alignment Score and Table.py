# -*- coding: utf-8 -*-
"""Lab 05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0rrkett6wyddSzOV4dfW7JqgSGe5l4k
"""

###Part One
def alignment_score(seq1, seq2, match=1, mismatch=-1, gap=-1):
  score = 0
  x =0
  if len(seq1) == len(seq2):
    while x < len(seq1):
      if seq1[x]==seq2[x]:
        score += match
      elif seq1[x] == '-' or seq2[x] == '-':
        score += gap
      else:
        score += mismatch
      x += 1
    print(seq1)
    print(seq2)
    print('score:', score)
  else:
    print('Error')

alignment_score('AATATGATA', 'AAGTTCATA', match=1, mismatch=-1, gap=-1 )

alignment_score('AATATGATA', 'AAGTTCATA', match = 2, mismatch = -2, gap = -2)

alignment_score('A-TAT-ATA', 'AATTTC-TA', match = 1, mismatch = -1, gap = -1)

alignment_score('A-TAT-ATA', 'AATTTC-TA', match = 2, mismatch = -2, gap = -2)

alignment_score('AGCTGAA', 'AATTTCAGAGA')

#This is Part Two
##Question 1
table = [[1,1,1], [2,2,2], [3,3,3]]
for i in table:
  print(i)

##Question 2
print("Updated table")
x = 0 
for unit in table:
  print ('Row', x, ":", unit)
  x+=1

##Question 3
table = [[1,1,1], [2,2,2], [3,3,3]]
a= 0
for unit in table:
  if unit == [1,1,1]:
    print('Row',a,":", [-1,-1,-1] )
  else:
    a= a+ 1
    print('Row', a, ":", unit)

##Question 4
table = [[1,1,1], [2,2,2], [3,3,3]]
a= 0
for unit in table:
  if unit == [1,1,1]:
    print('Row',a,":", [-1,-1,-1] )
  else:
    a +=1
    unit[0] = -1
    print('Row', a, ":", unit)

##Question 5
def alignment_table(str_1, str_2):
  print('Sequence 1:', str_1, 'with length', len(str_1))
  print('Sequence 1:', str_2, 'with length', len(str_2))
  print("The initial table with dimension", len(str_1)+1, 'and', len(str_2)+1, 'for the sequence alignment is:')
  # number of rows
  m = len(str_1) + 1
  # number of columns
  n = len(str_2) + 1
  # creating one row with n number of columns
  row = [0] * n

  # Create a for loop, with the range of 0 to len(m)

  for i in range(0, m):
    print(f"Row {i}:\t", row)
alignment_table('AATTATATT', 'ACGTTAT')

##Question 6 
def alignment_table_updated(str_1, str_2):
  print('Sequence 1:', str_1, 'with length', len(str_1))
  print('Sequence 1:', str_2, 'with length', len(str_2))
  print("The updated table with dimension", len(str_1)+1, 'and', len(str_2)+1, 'for the sequence alignment is:')

  # number of rows
  m = len(str_1) + 1
  # number of columns
  n = len(str_2) + 1
  # creating one row with n number of columns
  row = [0] * n 

  first_row = [0] * n # [ 0, -1, -2, -3, -4, -5, -6, -7]
  value = -1
  for i in range(1, len(first_row)):
    first_row[i] = value
    value -= 1
  
  print("Row 0:\t",first_row)
  # Reset value to -1
  value = -1
  for i in range(1, m):
    row[0] = value
    value -= 1
    print(f"Row {i}:\t", row)

alignment_table_updated('AATTATATT', 'ACGTTAT')

