# -*- coding: utf-8 -*-
"""Homework 02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cMfCpD42Qdk8yd_GotFm79MAeRSpqGqA
"""

#This is for question 1
DNA = 'GTTGATGTAGCTTATATAAAGCAAGGCACTGAAAATGCCTAGATGAGTCATAGACTCCATAAACAACAGGTTTGGTCCCGGCCTTTTTATTAGCTGTCTGCAGGATTATACATGCAAAAATCCCTACACCGGTGAGAATGCCCTATGTACCACACTCAGGTTTAAAGGAGCAGACATCAAGCACACTGCTAAGTAGCTCACGACGTCTTGCTT' 
print("DNA: ", DNA)

#The length of DNA
len(DNA)

#The first letter of the sequence
print(DNA[0])
#The last letter of the sequence
print(DNA[212])
#The first 10 characters
print(DNA[0:10])
#The last 10 characters
print(DNA[203:213])
#The count of C in DNA
print(DNA.count("C"))
#What is the index at which the first occurrence of the pattern CCAAT begins?
substring = 'CCAAT'
if DNA.find(substring) != -1:
  print(DNA.find(substring))
else:
  print('The motif is not found')

#This is for question 2
print(DNA[0:10] == DNA[203:213])
print(DNA.count("C") == DNA.count("A"))

#This is for question 3
print(DNA.count("C") >= DNA.count("A"))
print(DNA.index("C") >= DNA.index("A"))

#This is for question 4
print(DNA.count("C") > DNA.count("A") and DNA.count("C")< DNA.count("G"))
print(DNA.count("C") > DNA.count("A") or DNA.count("C")< DNA.count("G"))

x=8
y=9
print(not(not(x < 3) and not(y > 14 or y > 10)))

#This is for question 5
area = 10.0
if (area < 9):
  print("small")
elif (area < 12):
  print("medium")
else:
  print("large")

if len(DNA) < 100:
  print("The DNA sequence is short")
elif len(DNA) < 500:
  print("The DNA sequence is medium")
else:
  print("The length is long")

#This is for question 6
#The example given will do 3 loops
#Use while loop, keep printing the letters from left to right in the DNA sequence until you reach the first letter 'C'
n = 0
shortDNA = " "
while n < len(DNA):
  if DNA[n] != "C":
    shortDNA = shortDNA + DNA[n]
    n = n + 1
  else: 
    break
print(shortDNA)

#Use while loop, keep printing the letters from left to right in the DNA sequence if the letter is not 'C'.
z = 0
modifiedDNA = " "
while z < len(DNA):
  if DNA[z] != "C":
    modifiedDNA = modifiedDNA + DNA[z]
  z = z + 1
  
print(modifiedDNA)

#Use while loop, keep printing the letters from left to right in the DNA sequence if the letters are not 'C' and 'G'.
b = 0
modifiedDNA_2 = " "
while b < len(DNA):
  if DNA[b] != "C" and DNA[b] != "G":
    modifiedDNA_2 += DNA[b]
  b += 1

print(modifiedDNA_2)

#Use while loop, keep printing the letters from left to right in the DNA sequence if the letters are either 'A' or 'G
w = 0
modifiedDNA_3 = " "
while w < len(DNA):
  if DNA[w] != "A" and DNA[w] != "G":
    modifiedDNA_3 += DNA[w]
  w += 1
print(modifiedDNA_3)

#This is for question 7
#I
course_ids= ['CSCI1020', 'CSCI1030', 'CSCI1070']
for id in course_ids: 
    print("The course id is",id)

#II
newString_4 = " "
for letters in DNA:
  if letters != "C":
    newString_4 += letters
  else: 
    break
print(newString_4)

#III
newString_5 = " "
for letters in DNA:
  if letters == "A" or letters == "G":
    newString_5 += letters
  else:
    continue
print(newString_5)

#This is question 8
CS_courses= { "CSCI1020":"Intro to bioinformatics", "CSCI1030":'Intro to Game Design', "CSCI1070":'Intro to Big Data' }

keys_1 = (CS_courses.keys())
#vals = list(CS_courses.values())

for key in keys_1:
  finalKey = (key)
  print("The course name of",finalKey, "is", CS_courses.get(finalKey))

#This is question 9
#1. How often is a letter followed immediately by the same letter in the DNA sequence?
counts = 0
n = 0 
while n < len(DNA) - 1:
  if DNA[n] == DNA[n+1]:
    counts = counts + 1
  n += 1

print(counts)

#2. If two consecutive nucleotides match each other, how often is the next nucleotide that same nucleotide?

n = 0
counts = 0
while n < len(DNA) -1:
    if DNA[n] == DNA[n+1] and DNA[n:n+2] == DNA[n+1:n+3] :      
      counts += 1     
    n=n+1 
print(counts)

#3. How many times does a motif of form CC?AT occur within the sequence? (where ? could be anything)
#DN='CCMAT'

n=0
countMotif = 0
while n < len(DNA) - 5:
  if DNA[n:n+2] == 'CC' and DNA[n+3:n+5] == 'AT':
    countMotif = countMotif + 1
  n = n + 1
print(countMotif)

#4 When the motif CC?AT does occur, what percentage of the time is the middle nucleotide an A? (A so-called cat box CCAAT)
n = 0
totalMotif = 0
while n < len(DNA) - 5:
  if DNA[n:n+2]== "CC" and DNA[n+3:n+5]== "AT":
    totalMotif += 1
  n += 1
print(totalMotif)

m = 0
specialMotif = 0
while m<len(DNA) -5:
  if DNA[m:m+5] == "CCAAT":
    specialMotif += 1
  m += 1
print(specialMotif)
  
percentage_of_occurrence = (specialMotif/totalMotif)
print(f"When the motif occurrs, {percentage_of_occurrence} % the middle nucleotide is an A")

#This is for question 10

alt_map = {'ins':'0'}
complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'} 

def reverse_complement(seq):    
    for k,v in alt_map.items():
        seq = seq.replace(k,v)
    bases = list(seq) 
    bases = reversed([complement.get(base,base) for base in bases])
    bases = ''.join(bases)
    for k,v in alt_map.items():
        bases = bases.replace(v,k)
    return bases

dna = "ATCCGAATACGGTTCGGGTA"
#print ("Reverse Complement:")
#print(reverse_complement(dna))

import re


motif = "CGAA"
dna = "ATCCGAATACGGTTCGGGTA"

def mutate(dna, motif):  
  if dna.find(motif):
    result_1 = re.sub(motif, '', dna, count=1)
    if dna.find(reverse_complement(motif)):
      result_2 = re.sub(reverse_complement(motif), '', result_1, count=1)
      print("result",result_2)
      myStringStartPos=''
      myStringStartPos=dna.find(motif, 0,len(result_2))
      dna.find(motif, 0,len(result_2))
      reverse_complement(motif)
      myReverseMotif = reverse_complement(motif)
      print("myresult",myReverseMotif)
      #findStartPosMotif=
      #remove from the dna from starting position to lengh of motif
      myReverseStringStrPos = dna.find(myReverseMotif, 0,len(dna))
      dna[0:myStringStartPos]
      dna[myReverseStringStrPos:len(dna)]
      finalString = dna[0:myStringStartPos] + dna[myReverseStringStrPos:len(dna)]
    else:
      print(dna) 
  else:
    print(dna)
  return finalString

print(mutate(dna,motif))

# This is for Testing

test_data = """ATCCGAATACGGTTCGGGTA CGAA
ATCCGAATACGGTTGGGTA CGAA
ATCCAATACGGTTCGGGTA CGAA
ATCCGAATACGGTTCGGGTTCGA	CGAA
AGTCACATGATCAGT	C
TTTTGCGCCGAATTTTCG CGAA
CACACGAATATA CGAA
CCCTCGCGCGAATTCGAA CGAA
AACGGAATTTCGAAAACTTCG CGAA
TATATACGAAATATTTGCTTCGTTCG CGAA"""


for dna,motif in [line.split() for line in test_data.split('\n')[0:]]:
    print('Executing mutate(%s,%s)...' % (dna,motif))
    print('  returned: %s' % (mutate(dna,motif)))