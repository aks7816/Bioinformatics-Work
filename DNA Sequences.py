# -*- coding: utf-8 -*-
"""hw 05 finale.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sAt5PLuqqBTi5drRZoe0wAz3cAvBV0T6
"""

###### Step 1. Move to working directory
import os
work_dir = '/content/'
# On colab, default work path is '/content/', which may not be visible on google drive
os.chdir(work_dir)
# print out working directory
!pwd

###### Step 2. Create a folder 'dataset', DNA sequences will be saved in folder 'dataset'
import os
if not os.path.exists('dataset'):
    os.mkdir('dataset')

# check if this directory shows in current working directory, recall the Linux command 'ls'
!ls

###### Step 3. Download gene sequences from NCBI based on the ids.
###### Sequences will be saved in folder 'dataset'
def download_sequence_from_ncbi(data):
    import sys
    from urllib.request import urlretrieve,urlopen
    URL_FASTA = 'https://www.ncbi.nlm.nih.gov/nuccore/NC_001700.1?report=fasta'
    URL_GI = 'https://www.ncbi.nlm.nih.gov/nuccore/%s?report=gilist&log$=seqview&format=text'
    URL_VIEWER = 'https://www.ncbi.nlm.nih.gov/sviewer/viewer.cgi?tool=portal&sendto=on&log$=seqview&db=mitochondrion&dopt=fasta&sort=&val=%s&from=begin&to=end&maxplex=1'
    ## data is a string separated by line break \n, each line contains id of sequence
    # For instance, 'KT444582.1 2013-07-21  SARS-like CoV WIV16\nKY417146.1 2013-04-17  Bat SARS-like CoV Rs4231'
    for info in data.split('\n'):
        code = info.split()[0]
        code = code.strip()
        #print(code)
        ## connect to ncbi, and download the sequence remotely
        gi = str(urlopen(URL_GI % code).read()).split('<pre>')[1].split('</pre>')[0].strip().replace("\\n",'')
        #print(gi)
        print("Downloading sequence for ", code)
        urlretrieve(URL_VIEWER % gi, 'dataset/%s.fasta'%code)

data = """NC_000845	16613	wild boar 
NC_000884	16801	guinea pig
NC_000891	17019	platypus
NC_000894	20992	leishmania
NC_001321	16398	fin whale
NC_001499	5894	abelson (virus)
NC_001601	16402	blue whale
NC_001602	16797	grey seal
NC_001610	17084	virginia opossum
NC_001644	16563	bonobo
NC_001645	16364	gorilla
NC_001700	17009	cat
NC_001722	10359	hiv-2 (virus)
NC_001788	16670	wild ass
NC_002008	16727	dog
NC_002078	16816	aardvark
NC_002083	16499	orangutan
NC_002369	16507	red squirrel
NC_002783	16749	rhea
NC_003190	16715	john dory
NC_003322	16996	common wombat
NC_004380	16479	goosefish
NC_004390	16508	tapetail
NC_005212	17047	cheetah
NC_005797	16369	axolotl
NC_005958	16016	alligator lizard
NC_006887	16375	tiger salamander
NC_006928	16408	brydes whale
NC_007233	5990	monkey malaria parasite
NC_008092	16729	gray wolf 1
NC_008161	14853	stony coral
NC_008221	15774	asian longhorned beetle
NC_008410	17277	asiatic toad
NC_008668	16778	ray-finned fish
NC_009064	16703	indo-pacific sergeant
NC_009686	16757	gray wolf 2
NC_009692	16431	sea otter
NC_009830	16434	powderblue surgeonfish
NC_010570	16433	pirarucu
NC_010638	16773	snow leopard
NC_011137	16565	neanderthal
NC_011180	16825	flat needlefish
NC_011196	16738	greylag goose
NC_011943	16502	starry triggerfish
NC_011947	16441	spiny tailed leatherjacket
NC_012920	16569	human
NC_013272	16518	brown marmorated stink bug
NC_014175	16544	peninsular horned tree lizard
NC_014295	15895	eastern honey bee
NC_014887	15599	chinese grasshopper
NC_015119	16803	snow scorpionfly
NC_015200	16939	eurasian magpie
NC_015342	15647	kudzu beetle
NC_016197	13724	filarial nematode
NC_016198	14281	giant roundworm
NC_016419	15140	east palearctic butterfly
NC_016428	16263	striped field mouse
NC_016577	2633	AbMV (virus)
NC_018033	16683	blood pheasant
NC_018801	16775	red-winged blackbird
NC_018804	16773	saffron-cowled blackbird
NC_019571	13913	cat lungworm
NC_020099	1670	copepod
NC_020336	16525	tiger tail seahorse
NC_020346	17098	greenspot goby
NC_020591	16673	hazel grouse
NC_020648	16538	striped skunk
NC_020669	17112	striped hyena
NC_021386	16580	long-tailed chinchilla
NC_021933	15282	millipede
NC_022415	16744	white shark
NC_022429	16637	spectral bat
NC_022827	18479	staghorn coral
NC_023248	29999	anamorphic fungus
NC_023520	16773	sand tiger shark
NC_023889	16386	killer whale
NC_023955	15782	freshwater pearl mussel
NC_024052	16965	diana tarsier
NC_024268	17937	silver-throated bushtit
NC_024820	16433	giraffe
NC_024853	16509	moonlighter fish
NC_025222	16560	tonkean macaque
NC_025594	16802	long-tailed rosefinch
NC_025923	20350	Eurasian bittern
NC_026082	17952	besra
NC_026104	15804	stonefly
NC_026308	17298	baja california brush lizard
NC_026914	14948	water flea
NC_027241	16893	goulds sunbird
NC_027847	17962	grey parrot
NC_027857	16551	bandit angelfish
NC_027932	16232	harvest mouse
NC_027943	16270	peruvian scallop
NC_027956	16721	african golden wolf
NC_028018	16653	white char
NC_028290	16565	atlantic sturgeon
NC_028510	17271	austrolebias
NC_029146	17821	silvereye
NC_029168	15326	acasta sulcata
NC_029498	15281	yellow-banded acraea
NC_029510	15258	dancing acraea
NC_029846	17370	lesser kestrel
NC_030247	16603	labeonin
NC_030265	15534	european mantis
NC_031807	16581	common carp
NC_031858	16310	pacific star shell
NC_032058	17827	abyssinian white-eye
NC_032084	17165	grey burrowing snake
NC_033906	15872	Sinopodisma wulingshanensis
NC_033973	16817	terek sandpiper
NC_034122	14913	congo termite
NC_035130	6363	australian mosquito
NC_035150	18974	cat gecko
NC_035677	16130	bean weevil
NC_035817	16490	finlaysons squirrel
NC_036391	16513	yellow bullhead
NC_036493	17325	Santa Barbara tree frog"""

###### Step 5. Download the sequence related to 2019-nCoV
download_sequence_from_ncbi(data)

###### Step 6a. Check the downloaded sequences in folder '/content/dataset/'
print('Working directory: ',work_dir)
os.chdir(work_dir)
!ls 'dataset'

###### Step 6b. check the contents in one fasta file 
!head dataset/NC_000845.fasta

###### Step 7. Loading the gene sequences from fasta file and check the length of each gene 
def parse_fasta(filename):
    if '.' not in filename:
        filename += '.fasta'
    if not filename.endswith('.fasta'):
        raise ValueError('Filename should end with .fasta')
    with open(filename) as fasta:
        header = fasta.readline()   # ignore
        return ''.join(line.strip() for line in fasta)

import glob
for file_path in sorted(glob.glob('/content/dataset/*.fasta')):
  print("Loading ",file_path, end=" ")
  sequence = parse_fasta(file_path)
  #print(sequence)
  print("Length: ",len(sequence))

###### Step 8. Install biopython packages for alignment analysis
!pip install biopython

###### Step 9a. Download blast standalone software, and uncompress the file
!wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.11.0+-x64-linux.tar.gz
!tar -zxf ncbi-blast-2.11.0+-x64-linux.tar.gz

###### Step 9b. The blast tools can be found at ncbi-blast-2.11.0+/bin, we will use blastn in this analysis for DNA sequence search
!ls ncbi-blast-2.11.0+/bin

###### Step 10a. To run blast, we can directly use commandline to call blast for sequence comparison, check how to use blast as follows:
!ncbi-blast-2.11.0+/bin/blastn -h

###### Step 10b. Test blast on two example sequences, output will contain summary of alignment
!ncbi-blast-2.11.0+/bin/blastn -query dataset/NC_000845.fasta -subject dataset/NC_000884.fasta



###### Step 11a. To facilitate the analysis, we can use functions in biopython to better process the blast result
def run_blast_and_parse(sequence_file1, sequence_file2):
    ## check if the two sequence files exist
    import os
    if not os.path.exists(sequence_file1) or not os.path.exists(sequence_file2):
        print("Couldn't find sequence file")
        return

    ## load modules
    from Bio.Blast.Applications import NcbiblastpCommandline
    from io import StringIO
    from Bio.Blast import NCBIXML
    from Bio.Seq import Seq
    from Bio.SeqRecord import SeqRecord
    from Bio import SeqIO
    #https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/
    # Run BLAST and parse the output as XML
    output = NcbiblastpCommandline(cmd='ncbi-blast-2.11.0+/bin/blastn',query=sequence_file1, subject=sequence_file2, outfmt=5)()[0]
    blast_result_record = NCBIXML.read(StringIO(output))
    # Print some information on the result
    for alignment in blast_result_record.alignments:
        hsp = alignment.hsps[0] # select top one
        print('****Alignment Summary****')
        print('sequence:', alignment.title)
        print('length:', alignment.length)
        print('identity:', hsp.identities)
        print('positives:', hsp.positives)
        print('similarity:', hsp.positives/alignment.length)
        print('score:', hsp.score)
        print('Query:  ',hsp.query)
        print('        ',hsp.match)
        print('Subject:',hsp.sbjct,'\n')
        ## return required information for our lab
        ## hit name, alignment length, identities, positives, similarities
        return alignment.title,alignment.length,hsp.identities,hsp.positives,hsp.positives/alignment.length

import pandas as pd
query_id = 'NC_000845'
all_list = ["NC_000884","NC_000891","NC_000894","NC_001321","NC_001499","NC_001601","NC_001602","NC_001610","NC_001644","NC_001645","NC_001700","NC_001722","NC_001788","NC_002008","NC_002078","NC_002083","NC_002369","NC_002783","NC_003190","NC_003322","NC_004380","NC_004390","NC_005212","NC_005797","NC_005958","NC_006887","NC_006928","NC_007233","NC_008092","NC_008161","NC_008221","NC_008410","NC_008668","NC_009064","NC_009686","NC_009692","NC_009830","NC_010570","NC_010638","NC_011137","NC_011180","NC_011196","NC_011943","NC_011947","NC_012920","NC_013272","NC_014175","NC_014295","NC_014887","NC_015119","NC_015200","NC_015342","NC_016197","NC_016198","NC_016419","NC_016428","NC_016577","NC_018033","NC_018801","NC_018804","NC_019571","NC_020099","NC_020336","NC_020346","NC_020591","NC_020648","NC_020669","NC_021386","NC_021933","NC_022415","NC_022429","NC_022827","NC_023248","NC_023520","NC_023889","NC_023955","NC_024052","NC_024268","NC_024820","NC_024853","NC_025222","NC_025594","NC_025923","NC_026082","NC_026104","NC_026308","NC_026914","NC_027241","NC_027847","NC_027857","NC_027932","NC_027943","NC_027956","NC_028018","NC_028290","NC_028510","NC_029146","NC_029168","NC_029498","NC_029510","NC_029846","NC_030247","NC_030265","NC_031807","NC_031858","NC_032058","NC_032084","NC_033906","NC_033973","NC_034122","NC_035130","NC_035150","NC_035677","NC_035817","NC_036391","NC_036493"]
summary = pd.DataFrame(columns=['Hit_name', 'Length', 'Identities', 'Positives', 'Similarity'])

for subject_id in all_list:
  print(query_id,' VS ',subject_id)
  try:
      hit_name, alignment_length, identities, positives, similarities =run_blast_and_parse("dataset/"+query_id+".fasta", "dataset/"+subject_id+".fasta")
  except:
      print('No alignment is generated, skip to next!')
      continue
  print("Output: ",hit_name, alignment_length, identities, positives, similarities)
  summary = summary.append({'Hit_name': hit_name, 'Length': alignment_length, 'Identities': identities, 'Positives': positives, 'Similarity': similarities}, ignore_index=True)  

summary

# Sort the rows of dataframe by 'Similarity' column
pd.set_option('display.max_colwidth',1000)
summary = summary.sort_values(by = 'Similarity', ascending = False)
summary = summary.reset_index(drop=True)
summary

